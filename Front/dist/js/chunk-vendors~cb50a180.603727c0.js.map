{"version":3,"sources":["webpack:///./node_modules/date-fns/millisecondsToHours/index.js","webpack:///./node_modules/date-fns/min/index.js","webpack:///./node_modules/date-fns/milliseconds/index.js","webpack:///./node_modules/date-fns/max/index.js","webpack:///./node_modules/date-fns/millisecondsToMinutes/index.js","webpack:///./node_modules/date-fns/millisecondsToSeconds/index.js"],"names":["Object","defineProperty","exports","value","default","millisecondsToHours","_index","_interopRequireDefault","_index2","obj","__esModule","milliseconds","arguments","hours","millisecondsInHour","Math","floor","module","min","_typeof","Symbol","iterator","constructor","prototype","dirtyDatesArray","datesArray","result","forEach","Date","NaN","Array","slice","call","dirtyDate","currentDate","undefined","isNaN","getDate","daysInYear","_ref","years","months","weeks","days","minutes","seconds","totalDays","totalSeconds","round","max","Number","millisecondsToMinutes","millisecondsInMinute","millisecondsToSeconds","millisecondsInSecond"],"mappings":"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","file":"js/chunk-vendors~cb50a180.603727c0.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = millisecondsToHours;\n\nvar _index = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nvar _index2 = require(\"../constants/index.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name millisecondsToHours\n * @category Conversion Helpers\n * @summary Convert milliseconds to hours.\n *\n * @description\n * Convert a number of milliseconds to a full number of hours.\n *\n * @param {number} milliseconds - number of milliseconds to be converted\n *\n * @returns {number} the number of milliseconds converted in hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 7200000 milliseconds to hours:\n * const result = millisecondsToHours(7200000)\n * //=> 2\n *\n * @example\n * // It uses floor rounding:\n * const result = millisecondsToHours(7199999)\n * //=> 1\n */\nfunction millisecondsToHours(milliseconds) {\n  (0, _index.default)(1, arguments);\n  var hours = milliseconds / _index2.millisecondsInHour;\n  return Math.floor(hours);\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = min;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * @name min\n * @category Common Helpers\n * @summary Returns the earliest of the given dates.\n *\n * @description\n * Returns the earliest of the given dates.\n *\n * @param {Date[]|Number[]} datesArray - the dates to compare\n * @returns {Date} - the earliest of the dates\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which of these dates is the earliest?\n * const result = min([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Wed Feb 11 1987 00:00:00\n */\nfunction min(dirtyDatesArray) {\n  (0, _index2.default)(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (_typeof(dirtyDatesArray) === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = (0, _index.default)(dirtyDate);\n\n    if (result === undefined || result > currentDate || isNaN(currentDate.getDate())) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = milliseconds;\n\nvar _index = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n// 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\nvar daysInYear = 365.2425;\n/**\n * @name milliseconds\n * @category Millisecond Helpers\n * @summary\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n *\n * @description\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n *\n * One month is a year divided by 12.\n *\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {number} the milliseconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // 1 year in milliseconds\n * milliseconds({ years: 1 })\n * //=> 31556952000\n *\n * // 3 months in milliseconds\n * milliseconds({ months: 3 })\n * //=> 7889238000\n */\n\nfunction milliseconds(_ref) {\n  var years = _ref.years,\n      months = _ref.months,\n      weeks = _ref.weeks,\n      days = _ref.days,\n      hours = _ref.hours,\n      minutes = _ref.minutes,\n      seconds = _ref.seconds;\n  (0, _index.default)(1, arguments);\n  var totalDays = 0;\n  if (years) totalDays += years * daysInYear;\n  if (months) totalDays += months * (daysInYear / 12);\n  if (weeks) totalDays += weeks * 7;\n  if (days) totalDays += days;\n  var totalSeconds = totalDays * 24 * 60 * 60;\n  if (hours) totalSeconds += hours * 60 * 60;\n  if (minutes) totalSeconds += minutes * 60;\n  if (seconds) totalSeconds += seconds;\n  return Math.round(totalSeconds * 1000);\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = max;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * @name max\n * @category Common Helpers\n * @summary Return the latest of the given dates.\n *\n * @description\n * Return the latest of the given dates.\n *\n * @param {Date[]|Number[]} datesArray - the dates to compare\n * @returns {Date} the latest of the dates\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which of these dates is the latest?\n * const result = max([\n *   new Date(1989, 6, 10),\n *   new Date(1987, 1, 11),\n *   new Date(1995, 6, 2),\n *   new Date(1990, 0, 1)\n * ])\n * //=> Sun Jul 02 1995 00:00:00\n */\nfunction max(dirtyDatesArray) {\n  (0, _index2.default)(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (_typeof(dirtyDatesArray) === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = (0, _index.default)(dirtyDate);\n\n    if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = millisecondsToMinutes;\n\nvar _index = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nvar _index2 = require(\"../constants/index.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name millisecondsToMinutes\n * @category Conversion Helpers\n * @summary Convert milliseconds to minutes.\n *\n * @description\n * Convert a number of milliseconds to a full number of minutes.\n *\n * @param {number} milliseconds - number of milliseconds to be converted.\n *\n * @returns {number} the number of milliseconds converted in minutes\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 60000 milliseconds to minutes:\n * const result = millisecondsToMinutes(60000)\n * //=> 1\n *\n * @example\n * // It uses floor rounding:\n * const result = millisecondsToMinutes(119999)\n * //=> 1\n */\nfunction millisecondsToMinutes(milliseconds) {\n  (0, _index.default)(1, arguments);\n  var minutes = milliseconds / _index2.millisecondsInMinute;\n  return Math.floor(minutes);\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = millisecondsToSeconds;\n\nvar _index = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nvar _index2 = require(\"../constants/index.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name millisecondsToSeconds\n * @category Conversion Helpers\n * @summary Convert milliseconds to seconds.\n *\n * @description\n * Convert a number of milliseconds to a full number of seconds.\n *\n * @param {number} milliseconds - number of milliseconds to be converted\n *\n * @returns {number} the number of milliseconds converted in seconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Convert 1000 miliseconds to seconds:\n * const result = millisecondsToSeconds(1000)\n * //=> 1\n *\n * @example\n * // It uses floor rounding:\n * const result = millisecondsToSeconds(1999)\n * //=> 1\n */\nfunction millisecondsToSeconds(milliseconds) {\n  (0, _index.default)(1, arguments);\n  var seconds = milliseconds / _index2.millisecondsInSecond;\n  return Math.floor(seconds);\n}\n\nmodule.exports = exports.default;"],"sourceRoot":""}